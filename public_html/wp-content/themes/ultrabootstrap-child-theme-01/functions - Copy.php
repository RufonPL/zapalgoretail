<?php
/*
* Generated By Orbisius Child Theme Creator - your favorite plugin for Child Theme creation :)
* https://wordpress.org/plugins/orbisius-child-theme-creator/
*
* Unlike style.css, the functions.php of a child theme does not override its counterpart from the parent.
* Instead, it is loaded in addition to the parentâ€™s functions.php. (Specifically, it is loaded right before the parent theme's functions.php).
* Source: http://codex.wordpress.org/Child_Themes#Using_functions.php
*
* Be sure not to define functions, that already exist in the parent theme!
* A common pattern is to prefix function names with the (child) theme name.
* Also if the parent theme supports pluggable functions you can use function_exists( 'put_the_function_name_here' ) checks.
*/

/**
 * Loads parent and child themes' style.css
 */
 
function orbisius_ctc_ultrabootstrap_child_theme_enqueue_styles() {
    $parent_style = 'orbisius_ctc_ultrabootstrap_parent_style';
    $parent_base_dir = 'ultrabootstrap';

    wp_enqueue_style( $parent_style,
        get_template_directory_uri() . '/style.css',
        array(),
        wp_get_theme( $parent_base_dir ) ? wp_get_theme( $parent_base_dir )->get('Version') : ''
    );

    wp_enqueue_style( $parent_style . '_child_style',
        get_stylesheet_directory_uri() . '/style.css',
        array( $parent_style ),
        wp_get_theme()->get('Version')
    );
}

add_action( 'wp_enqueue_scripts', 'orbisius_ctc_ultrabootstrap_child_theme_enqueue_styles' );



if( function_exists('acf_add_options_page') ) {  

    acf_add_options_page(array(
            'page_title'    => 'Theme Options',
            'menu_title'    => 'Theme Options',
            'menu_slug'     => 'theme-options',
            'capability'    => 'edit_posts',
            'parent_slug'   => '',
            'position'      => false,
            'icon_url'      => false,
            'redirect'      => false,
        ));     

 }


/*
Plugin Name: WooCommerce Dropdown Cart
Plugin URI: https://wordpress.org/plugins/woocommerce-dropdown-cart/
Description: A widget plugin for WooCommerce to display the cart at top of page
Author: svincoll4
Version: 1.4.1
Author URI: https://www.facebook.com/svincoll4
*/
class WooCommerce_Widget_DropdownCart extends WP_Widget {
    var $woo_widget_cssclass;
    var $woo_widget_description;
    var $woo_widget_idbase;
    var $woo_widget_name;
    /**
     * constructor
     *
     * @access public
     * @return void
     */
    function WooCommerce_Widget_DropdownCart() {
        /* Widget variable settings. */
        $this->woo_widget_cssclass      = 'widget_shopping_mini_cart dropdown-cart';
        $this->woo_widget_description   = __( "Display the user's Cart in the sidebar.", 'woocommerce' );
        $this->woo_widget_idbase        = 'woocommerce_widget_minicart';
        $this->woo_widget_name          = __( 'WooCommerce Dropdown Cart', 'woocommerce' );
        /* Widget settings. */
        $widget_ops = array( 'classname' => $this->woo_widget_cssclass, 'description' => $this->woo_widget_description );
        /* Create the widget. */
        $this->WP_Widget( 'widget_shopping_mini_cart', $this->woo_widget_name, $widget_ops );
    }
    /**
     * widget function.
     *
     * @see WP_Widget
     * @access public
     * @param array $args
     * @param array $instance
     * @return void
     */
    function widget( $args, $instance ) {
        if(empty($instance['show_on_checkout']) && (is_cart() || is_checkout())){
            return;
        }
        $woocommerce = WC();
        extract( $args );
        $title = apply_filters('widget_title', empty( $instance['title'] ) ? '' : $instance['title'], $instance, $this->id_base );
        $hide_if_empty = empty( $instance['hide_if_empty'] )  ? 0 : 1;
        echo $before_widget;
        if ( $title )
            echo $before_title . $title . $after_title;
        $cart_contents_count = $woocommerce->cart->get_cart_contents_count();
        ?>
        <div class="widget_shopping_mini_cart_content">
            <?php if ( !$hide_if_empty || $cart_contents_count > 0 ) : ?>
                <div class="dropdown-cart-button <?php echo $hide_if_empty ? 'hide_dropdown_cart_widget_if_empty' : '' ?>" style="<?php echo $hide_if_empty && sizeof( $woocommerce->cart->get_cart() ) == 0 ? "display:none;":"" ?>">
                    <a href="#" class="dropdown-total"><?php echo $cart_contents_count.' '._n(__('item', 'woocommerce-ddc'), __('items', 'woocommerce-dc'), $cart_contents_count) ?> - <?php echo $woocommerce->cart->get_cart_subtotal(); ?></a>
                    <div class="dropdown">
                        <?php woocommerce_mini_cart(); ?>
                        <div class="clear"></div>
                    </div>
                </div>
            <?php else: ?>
                <script type="text/javascript">
                    jQuery(function($){
                        $('#<?php echo $this->id ?>').hide();
                    });
                </script>
            <?php endif; ?>
        </div>
        <?php
        echo $after_widget;
    }
    /**
     * update function.
     *
     * @see WP_Widget->update
     * @access public
     * @param array $new_instance
     * @param array $old_instance
     * @return array
     */
    function update( $new_instance, $old_instance ) {
        $instance['title'] = strip_tags( stripslashes( $new_instance['title'] ) );
        $instance['hide_if_empty'] = empty( $new_instance['hide_if_empty'] ) ? 0 : 1;
        $instance['show_on_checkout'] = empty( $new_instance['show_on_checkout'] ) ? 0 : 1;
        return $instance;
    }
    /**
     * form function.
     *
     * @see WP_Widget->form
     * @access public
     * @param array $instance
     * @return void
     */
    function form( $instance ) {
        $hide_if_empty = empty( $instance['hide_if_empty'] ) ? 0 : 1;
        $show_on_checkout = empty( $instance['show_on_checkout'] ) ? 0 : 1;
        ?>
        <p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:', 'woocommerce') ?></label>
            <input type="text" class="widefat" id="<?php echo esc_attr( $this->get_field_id('title') ); ?>" name="<?php echo esc_attr( $this->get_field_name('title') ); ?>" value="<?php if (isset ( $instance['title'])) {echo esc_attr( $instance['title'] );} ?>" /></p>

        <p><input type="checkbox" class="checkbox" id="<?php echo esc_attr( $this->get_field_id('hide_if_empty') ); ?>" name="<?php echo esc_attr( $this->get_field_name('hide_if_empty') ); ?>"<?php checked( $hide_if_empty ); ?> />
            <label for="<?php echo $this->get_field_id('hide_if_empty'); ?>"><?php _e( 'Hide if cart is empty', 'woocommerce' ); ?></label></p>

        <p><input type="checkbox" class="checkbox" id="<?php echo esc_attr( $this->get_field_id('show_on_checkout') ); ?>" name="<?php echo esc_attr( $this->get_field_name('show_on_checkout') ); ?>"<?php checked( $show_on_checkout ); ?> />
            <label for="<?php echo $this->get_field_id('show_on_checkout'); ?>"><?php _e( 'Show this widget on cart/checkout pages', 'woocommerce' ); ?></label></p>
    <?php
    }
}
function register_WooCommerce_Widget_DropdownCart() {
    if(class_exists('Woocommerce')) {
        register_widget('WooCommerce_Widget_DropdownCart');
    }
}
add_action( 'widgets_init', 'register_WooCommerce_Widget_DropdownCart' );
function register_script_WooCommerce_Widget_DropdownCart() {
    if(class_exists('Woocommerce')) {
        if( !is_admin() ){
            wp_enqueue_script('jquery');
            wp_enqueue_script('jquery-dropdown-cart', plugins_url('woocommerce-dropdown-cart/js/main.js'), array('jquery'));
            wp_enqueue_style('jquery-dropdown-cart', plugins_url('woocommerce-dropdown-cart/css/style.css'));
        }
    }
}
add_action( 'wp_enqueue_scripts', 'register_script_WooCommerce_Widget_DropdownCart' );


function wpb_custom_new_menu() {
  register_nav_menu('my-custom-menu1',__( 'My Custom Menu 1' ));
  register_nav_menu('my-custom-menu2',__( 'My Custom Menu 2' ));
  register_nav_menu('my-custom-menu3',__( 'My Custom Menu 3' ));
  register_nav_menu('my-custom-menu4',__( 'My Custom Menu 4' ));
  register_nav_menu('my-custom-menu5',__( 'My Custom Menu 5' ));
  register_nav_menu('my-custom-menu6',__( 'My Custom Menu 6' ));
  register_nav_menu('my-custom-menu7',__( 'My Custom Menu 7' ));
  register_nav_menu('my-custom-menu8',__( 'My Custom Menu 8' ));
  register_nav_menu('my-custom-menu9',__( 'My Custom Menu 9' ));
  register_nav_menu('my-custom-menu10',__( 'My Custom Menu 10' ));
  register_nav_menu('my-custom-menu11',__( 'My Custom Menu 11' ));
  register_nav_menu('my-custom-menu12',__( 'My Custom Menu 12' ));
  register_nav_menu('my-custom-menu13',__( 'My Custom Menu 13' ));
  register_nav_menu('my-custom-menu14',__( 'My Custom Menu 14' ));
}
add_action( 'init', 'wpb_custom_new_menu' );


add_action( 'wp_enqueue_scripts', 'wcqi_enqueue_polyfill' );
function wcqi_enqueue_polyfill() {
    wp_enqueue_script( 'wcqi-number-polyfill' );
}


function pippin_login_form_shortcode( $atts, $content = null ) { 

	extract( shortcode_atts( array(
      'redirect' => ''
      ), $atts ) ); 

	if (!is_user_logged_in()) {
		if($redirect) {
			$redirect_url = $redirect;
		} else {
			$redirect_url = get_permalink();
		}
		$form = wp_login_form(array('echo' => false, 'redirect' => $redirect_url ));
	} 
	return $form;
}
add_shortcode('loginform', 'pippin_login_form_shortcode');


/**
 * WooCommerce Extra Feature
 * --------------------------
 *
 * Register a shortcode that creates a product categories dropdown list
 *
 * Use: [product_categories_dropdown orderby="title" count="0" hierarchical="0"]
 *
 */
add_shortcode( 'product_categories_dropdown', 'woo_product_categories_dropdown' );
function woo_product_categories_dropdown( $atts ) {
  extract(shortcode_atts(array(
    'count'         => '0',
    'hierarchical'  => '0',
    'orderby' 	    => ''
    ), $atts));
	
	ob_start();
	
	$c = $count;
	$h = $hierarchical;
	$o = ( isset( $orderby ) && $orderby != '' ) ? $orderby : 'order';
		
	// Stuck with this until a fix for http://core.trac.wordpress.org/ticket/13258
	woocommerce_product_dropdown_categories( $c, $h, 0, $o );
	?>
	<script type='text/javascript'>
	/* <![CDATA[ */
		var product_cat_dropdown = document.getElementById("dropdown_product_cat");
		function onProductCatChange() {
			if ( product_cat_dropdown.options[product_cat_dropdown.selectedIndex].value !=='' ) {
				location.href = "<?php echo home_url(); ?>/?product_cat="+product_cat_dropdown.options[product_cat_dropdown.selectedIndex].value;
			}
		}
		product_cat_dropdown.onchange = onProductCatChange;
	/* ]]> */
	</script>
	<?php
	
	return ob_get_clean();
	
}

add_role('retailer', 'Retailer', array(
    'read' => true, 
    'edit_posts' => false,
    'delete_posts' => false, 
));



function start_session() {
	if(!session_id()) {
		session_start();	
	}
	if( !isset($_SESSION['CC']) ) {
		$_SESSION['CC'] = 'EUR';
	}
	if( !isset($_SESSION['CR']) ) {
		$_SESSION['CR'] = 1;
	}
}
add_action('init', 'start_session', 9);

function change_currency() {
	if(isset($_GET['cc'])) {
		$code = strtoupper($_GET['cc']);
		$cr = get_rate_from_nbp($code);
		$_SESSION['CC'] = $code;
		$_SESSION['CR'] = $cr->rate;
		wp_safe_redirect(get_permalink()); exit();
	}
}
add_action('template_redirect', 'change_currency');

function get_rate_from_nbp($currency) {
	$get_rates 	= @file_get_contents('http://api.nbp.pl/api/exchangerates/tables/a/?format=json');
	$rates 		= array();
	$data 		= new stdClass();
	
	$rate 	= 1;
	$code 	= $currency == 'PLN' ? 'PLN' : 'EUR';
	$eur 	= 1;
	
	if($get_rates) {
		$result = json_decode($get_rates);	
		$table 	= $result[0]->rates;
		
		foreach($table as $row) {
			$rates[$row->code] = $row->mid;
		}
		
		$eur = $rates['EUR'];
		
		if( $rates[$currency] ) {
			$rate = $rates[$currency];
			$code = $currency;
		}
	}
	
	
	
	$data->rate = $currency == 'PLN' ? $rate*$eur : $eur/$rate;
	$data->code = $code;
	
	return $data;
}

function exchange_price($price) {
	$code = $_SESSION['CC'];
	$rate = $_SESSION['CR'];
	
	$newPrice = $price*$rate;
	
	return wc_price($newPrice, array('currency'=>$code));
}

function change_currency_position( ) { 
   	if($_SESSION['alg_currency'] == 'USD') {
		return 'left_space';	
	}else {
		return 'right_space';
	}
}; 
add_filter( 'pre_option_woocommerce_currency_pos', 'change_currency_position' );

add_filter('woocommerce_currency_symbol', 'change_currency_symbol', 10, 2);
function change_currency_symbol( $currency_symbol, $currency ) {
	//print_r($currency);
	/* switch( $currency ) {
		case 'AUD': $currency_symbol = 'AUD $'; break;
	} */
	return $currency_symbol;
}

function cart_count() {
	return WC()->cart->get_cart_contents_count();	
}